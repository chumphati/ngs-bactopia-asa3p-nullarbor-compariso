import matplotlib.pyplot as plt
import networkx as nx

##################
#NETTOYAGE DES READS
##################

G = nx.Graph()
G.add_node('bactopia', pos=(0, 0), label='Bactopia', shape='circle')
G.add_node('AQUAMIS', pos=(0, 4), label='AQUAMIS', shape='circle')
G.add_node('asa3p', pos=(0, 8), label='ASA3P', shape='circle')
G.add_node('MicroPIPE', pos=(0, 12), label='MicroPIPE', shape='circle')
G.add_node('Nullarbor', pos=(0, 16), label='Nullarbor', shape='circle')
G.add_node('ProkEvo', pos=(0, 20), label='ProkEvo', shape='circle')
G.add_node('PHBG', pos=(0, 24), label='PHBG', shape='circle')
G.add_node('rMAP', pos=(0, 28), label='rMAP', shape='circle')
G.add_node('TORMES', pos=(0, 32), label='TORMES', shape='circle')
G.add_node('fastp', pos=(1, 0), label='Fastp', shape='circle')
G.add_node('trimmomatic', pos=(1, 4), label='Trimmomatic', shape='circle')
G.add_node('bbtools', pos=(1, 8), label='BBTools', shape='circle')
G.add_node('fitlong', pos=(1, 12), label='Fitlong', shape='circle')
G.add_node('Porechop', pos=(1, 16), label='Porechop', shape='circle')
G.add_node('Lighter', pos=(1, 20), label='Lighter', shape='circle')
G.add_node('McCortex', pos=(1, 24), label='McCortex', shape='circle')
G.add_node('Japsa', pos=(1, 28), label='Japsa', shape='circle')
G.add_node('Prinseq', pos=(1, 32), label='Prinseq', shape='circle')
G.add_edges_from([('bactopia', 'bbtools'), ('bactopia', 'McCortex'), ('bactopia', 'Lighter')])
G.add_edges_from([('asa3p', 'trimmomatic'), ('asa3p', 'fitlong')])
G.add_edges_from([('AQUAMIS', 'fastp')])
G.add_edges_from([('MicroPIPE', 'Porechop'), ('MicroPIPE', 'fitlong'), ('MicroPIPE', 'Japsa')])
G.add_edges_from([('Nullarbor', 'trimmomatic')])
G.add_edges_from([('ProkEvo', 'trimmomatic')])
G.add_edges_from([('PHBG', 'bbtools'), ('PHBG', 'fastp'), ('PHBG', 'trimmomatic')])
G.add_edges_from([('rMAP', 'trimmomatic')])
G.add_edges_from([('TORMES', 'trimmomatic'), ('TORMES', 'Prinseq')])
labels_pos = {node: (x + 0.25, y) if node in ['fastp', 'trimmomatic', 'bbtools', 'fitlong', 'Porechop', 'Lighter', 'McCortex', 'Japsa', 'Prinseq'] else (x + -0, y) for node, (x, y) in nx.get_node_attributes(G, 'pos').items()}
degrees = dict(G.degree())
edge_widths = [0.2 * degrees[edge[1]] for edge in G.edges()]
node_shapes = nx.get_node_attributes(G, 'shape')
node_labels = nx.get_node_attributes(G, 'label')
pos = nx.get_node_attributes(G, 'pos')
fig, ax = plt.subplots(figsize=(6, 8))
plt.margins(x=0.2, y=0.2)
ax.axis('off')
pos = nx.spring_layout(G, pos=pos, fixed=pos.keys(), k=1.5)
nx.draw_networkx_nodes(G, pos, nodelist=['bactopia', 'asa3p', 'AQUAMIS', 'MicroPIPE', 'Nullarbor', 'ProkEvo', 'PHBG', 'rMAP', 'TORMES'], node_color='gray', node_shape='o')
nx.draw_networkx_nodes(G, pos, nodelist=['fastp', 'trimmomatic', 'bbtools', 'fitlong', 'Porechop', 'Lighter', 'McCortex', 'Japsa', 'Prinseq'], node_color='lightgray', node_shape='s')
nx.draw_networkx_edges(G, pos, edge_color='gray', width=edge_widths)  # Utilisation des épaisseurs d'arêtes calculées
nx.draw_networkx_labels(G, labels_pos, labels=node_labels, horizontalalignment='right')
plt.title("A. Outils de nettoyage des reads", loc="left", fontweight="bold")
plt.show()

##################
#ASSEMBLAGE
##################

G = nx.Graph()
G.add_node('bactopia', pos=(0, 0), label='Bactopia', shape='circle')
G.add_node('AQUAMIS', pos=(0, 4), label='AQUAMIS', shape='circle')
G.add_node('asa3p', pos=(0, 8), label='ASA3P', shape='circle')
G.add_node('MicroPIPE', pos=(0, 12), label='MicroPIPE', shape='circle')
G.add_node('Nullarbor', pos=(0, 16), label='Nullarbor', shape='circle')
G.add_node('ProkEvo', pos=(0, 20), label='ProkEvo', shape='circle')
G.add_node('PHBG', pos=(0, 24), label='PHBG', shape='circle')
G.add_node('rMAP', pos=(0, 28), label='rMAP', shape='circle')
G.add_node('TORMES', pos=(0, 32), label='TORMES', shape='circle')
G.add_node('Shovill', pos=(1, 0), label='Shovill', shape='circle')
G.add_node('Unicycler', pos=(1, 4), label='Unicycler', shape='circle')
G.add_node('SPAdes', pos=(1, 8), label='SPAdes', shape='circle')
G.add_node('HGAP', pos=(1, 12), label='HGAP', shape='circle')
G.add_node('Flye', pos=(1, 16), label='Flye', shape='circle')
G.add_node('BUSCO', pos=(1, 20), label='BUSCO', shape='circle')
G.add_node('assembly-scan', pos=(1, 24), label='assembly\n-scan', shape='circle')
G.add_node('CheckM', pos=(1, 28), label='CheckM', shape='circle')
G.add_node('QUAST', pos=(1, 32), label='QUAST', shape='circle')
G.add_edges_from([('bactopia', 'Shovill'), ('bactopia', 'Unicycler'), ('bactopia', 'assembly-scan'), ('bactopia', 'CheckM'), ('bactopia', 'QUAST')])
G.add_edges_from([('asa3p', 'SPAdes'), ('asa3p', 'HGAP'), ('asa3p', 'Unicycler')])
G.add_edges_from([('AQUAMIS', 'Shovill'), ('AQUAMIS', 'QUAST')])
G.add_edges_from([('MicroPIPE', 'Flye'), ('MicroPIPE', 'QUAST')])
G.add_edges_from([('Nullarbor', 'Shovill')])
G.add_edges_from([('ProkEvo', 'SPAdes'), ('ProkEvo', 'QUAST')])
G.add_edges_from([('PHBG', 'Shovill'), ('PHBG', 'BUSCO'), ('PHBG', 'QUAST')])
G.add_edges_from([('rMAP', 'Shovill'), ('rMAP', 'Unicycler'), ('rMAP', 'QUAST'), ('rMAP', 'assembly-scan')])
G.add_edges_from([('TORMES', 'SPAdes'), ('TORMES', 'QUAST')])
labels_pos = {node: (x + 0.25, y) if node in ['Shovill', 'Unicycler', 'SPAdes', 'HGAP', 'Flye', 'BUSCO', 'assembly-scan', 'CheckM', 'QUAST'] else (x + -0, y) for node, (x, y) in nx.get_node_attributes(G, 'pos').items()}
degrees = dict(G.degree())
edge_widths = [0.2 * degrees[edge[1]] for edge in G.edges()]
node_shapes = nx.get_node_attributes(G, 'shape')
node_labels = nx.get_node_attributes(G, 'label')
pos = nx.get_node_attributes(G, 'pos')
fig, ax = plt.subplots(figsize=(6, 8))
plt.margins(x=0.2, y=0.2)
ax.axis('off')
pos = nx.spring_layout(G, pos=pos, fixed=pos.keys(), k=1.5)
nx.draw_networkx_nodes(G, pos, nodelist=['bactopia', 'asa3p', 'AQUAMIS', 'MicroPIPE', 'Nullarbor', 'ProkEvo', 'PHBG', 'rMAP', 'TORMES'], node_color='gray', node_shape='o')
nx.draw_networkx_nodes(G, pos, nodelist=['Shovill', 'Unicycler', 'SPAdes', 'HGAP', 'Flye', 'BUSCO', 'assembly-scan', 'CheckM', 'QUAST'], node_color='lightgray', node_shape='s')
nx.draw_networkx_edges(G, pos, edge_color='gray', width=edge_widths)  # Utilisation des épaisseurs d'arêtes calculées
nx.draw_networkx_labels(G, labels_pos, labels=node_labels, horizontalalignment='right')
plt.title("B. Outils d'assemblage de novo et contrôle qualité", loc="left", fontweight="bold")
plt.show()

##################
#ANNOTATION
##################

G = nx.Graph()
G.add_node('bactopia', pos=(0, 0), label='Bactopia', shape='circle')
G.add_node('AQUAMIS', pos=(0, 4), label='AQUAMIS', shape='circle')
G.add_node('asa3p', pos=(0, 8), label='ASA3P', shape='circle')
G.add_node('MicroPIPE', pos=(0, 12), label='MicroPIPE', shape='circle')
G.add_node('Nullarbor', pos=(0, 16), label='Nullarbor', shape='circle')
G.add_node('ProkEvo', pos=(0, 20), label='ProkEvo', shape='circle')
G.add_node('PHBG', pos=(0, 24), label='PHBG', shape='circle')
G.add_node('rMAP', pos=(0, 28), label='rMAP', shape='circle')
G.add_node('TORMES', pos=(0, 32), label='TORMES', shape='circle')
G.add_node('Prokka', pos=(1, 0), label='Prokka', shape='circle')
G.add_node('Bakta', pos=(1, 4), label='Bakta', shape='circle')
G.add_node('AMRFinderPlus', pos=(1, 8), label='AMRFinderPlus', shape='circle')
G.add_node('ARIBA', pos=(1, 12), label='ARIBA', shape='circle')
G.add_node('BLAST', pos=(1, 16), label='BLAST', shape='circle')
G.add_node('ConFindr', pos=(1, 20), label='ConFindr', shape='circle')
G.add_node('SNPeff', pos=(1, 24), label='SNPeff', shape='circle')
G.add_node('Roary', pos=(1, 28), label='Roary', shape='circle')
G.add_node('ABRicate', pos=(1, 32), label='ABRicate', shape='circle')
G.add_node('Kraken', pos=(1, 36), label='Kraken', shape='circle')
G.add_node('Centrifuge', pos=(1, 40), label='Centrifuge', shape='circle')
G.add_node('PlasmidFinder', pos=(1, 44), label='PlasmidFinder', shape='circle')
G.add_node('ResFinder', pos=(1, 48), label='ResFinder', shape='circle')
G.add_node('vcf-annotator', pos=(1, 52), label='vcf-annotator', shape='circle')
G.add_node('MUMmer', pos=(1, 56), label='MUMmer', shape='circle')
G.add_edges_from([('bactopia', 'Prokka'), ('bactopia', 'Bakta'), ('bactopia', 'AMRFinderPlus'), ('bactopia', 'ARIBA'), ('bactopia', 'BLAST'), ('bactopia', 'vcf-annotator')])
G.add_edges_from([('asa3p', 'Prokka'), ('asa3p', 'SNPeff'), ('asa3p', 'Kraken'), ('asa3p', 'Roary'), ('asa3p', 'MUMmer'), ('asa3p', 'RGI'), ('asa3p', 'BLAST')])
G.add_edges_from([('AQUAMIS', 'Kraken'), ('AQUAMIS', 'ConFindr')])
G.add_edges_from([('Nullarbor', 'Kraken'),('Nullarbor', 'Centrifuge'),('Nullarbor', 'Roary'),('Nullarbor', 'ABRicate'),('Nullarbor', 'Prokka')])
G.add_edges_from([('ProkEvo', 'ABRicate'), ('ProkEvo', 'PlasmidFinder'), ('ProkEvo', 'Prokka'), ('ProkEvo', 'Roary')])
G.add_edges_from([('PHBG', 'ABRicate'), ('PHBG', 'AMRFinderPlus'), ('PHBG', 'Bakta'), ('PHBG', 'ResFinder'), ('PHBG', 'Prokka'), ('PHBG', 'MUMmer'), ('PHBG', 'Kraken')])
G.add_edges_from([('rMAP', 'ABRicate'), ('rMAP', 'SNPeff'), ('rMAP', 'AMRFinderPlus'), ('rMAP', 'Prokka'), ('rMAP', 'Roary')])
G.add_edges_from([('TORMES', 'Kraken'), ('TORMES', 'Prokka'), ('TORMES', 'Roary'), ('TORMES', 'BLAST'), ('TORMES', 'ABRicate')])
labels_pos = {node: (x + 0.6, y) if node in ['Prokka','Bakta','AMRFinderPlus','ARIBA','BLAST','ConFindr','SNPeff','Roary','ABRicate','Kraken','Centrifuge','PlasmidFinder','ResFinder','vcf-annotator','MUMmer'] else (x + -0.15, y) for node, (x, y) in nx.get_node_attributes(G, 'pos').items()}
degrees = dict(G.degree())
edge_widths = [0.2 * degrees[edge[1]] for edge in G.edges()]
node_shapes = nx.get_node_attributes(G, 'shape')
node_labels = nx.get_node_attributes(G, 'label')
pos = nx.get_node_attributes(G, 'pos')
fig, ax = plt.subplots(figsize=(6, 8))
plt.margins(x=0.2, y=0.2)
ax.axis('off')
pos = nx.spring_layout(G, pos=pos, fixed=pos.keys(), k=1.5)
nx.draw_networkx_nodes(G, pos, nodelist=['bactopia', 'asa3p', 'AQUAMIS', 'MicroPIPE', 'Nullarbor', 'ProkEvo', 'PHBG', 'rMAP', 'TORMES'], node_color='gray', node_shape='o')
nx.draw_networkx_nodes(G, pos, nodelist=['Prokka','Bakta','AMRFinderPlus','ARIBA','BLAST','ConFindr','SNPeff','Roary','ABRicate','Kraken','Centrifuge','PlasmidFinder','ResFinder','vcf-annotator','MUMmer'], node_color='lightgray', node_shape='s')
nx.draw_networkx_edges(G, pos, edge_color='gray', width=edge_widths)  # Utilisation des épaisseurs d'arêtes calculées
nx.draw_networkx_labels(G, labels_pos, labels=node_labels, horizontalalignment='right')
plt.title("C. Outils d'annotation", loc="left", fontweight="bold")
plt.show()
